(dp1
S'output'
p2
S"<class 'bs4.FeatureNotFound'> Couldn't find a tree builder with the features you requested: xml. Do you need to install a parser library?"
p3
sS'layer'
p4
S'/Users/Joao/Documents/developer/web2py/web2py-1/applications/processos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: latin1 -*-\n\ndef user():\n    return dict(form=auth())\n\n@auth.requires_login()\ndef index():\n    ## Creates a list of the last 5 files correctly inputed\n    user = (db.processo.usuario == auth.user_id)\n    myset = db(user)\n    last = myset.select(db.processo.ALL, orderby=~db.processo.id, limitby=(0, 5))\n    \n    ## Shows a statistic of the files inputed in the month\n    ## Establishing todays month \n    today_month= str(request.now)[5:7]\n    mes = (db.processo.criado_em.month() == today_month)\n    \n    ## Establishing todays year \n    today_year= str(request.now)[0:4]\n    ano = (db.processo.criado_em.year() == today_year)\n    \n    relatora = ((db.processo.competencia == "Relatora") & mes & ano )\n    session.frelatora=db(relatora).count()\n    revisora = ((db.processo.competencia == "Revisora") & mes & ano)\n    session.frevisora=db(revisora).count()\n    session.ftotal = session.frelatora+session.frevisora\n    \n    return dict(rows=last)\n   \n\n\ndef cadastro():\n\n    form = SQLFORM.factory(Field(\'processo\', label=T(\'Numero do Processo: \'), requires=IS_NOT_EMPTY()))\n\n    if form.process().accepted:\n\n        soup_cadastrar(form.vars.processo)\n\n    return dict(form=form)\n\ndef soup_cadastrar(num):\n    import tj\n    processo = tj.get_page(num)\n    if len(processo)== 4:\n\n        session.processo_one = processo[0].decode(\'latin1\')\n        session.classe_one = processo[1].decode(\'latin1\')\n        session.processo_two = processo[2].decode(\'latin1\')\n        session.classe_two = processo[3].decode(\'latin1\')\n\n        redirect(URL(\'escolhe_processo\'))\n\n    else:\n       session.reu = processo[0].decode("latin1", "ignore")\n       session.classe = processo[1].decode("latin1", "ignore")\n       session.numero = processo[2]\n       session.crime = processo[3].decode("latin1", "ignore")\n       session.competencia = processo[4]\n       redirect(URL(\'cadastro_final\'))\n\n    return 0\n\n\n\ndef cadastro_final():\n\n    ##creating the submission form and hidding the date and user, which are filled in automatically\n    db.processo.criado_em.writable = False\n    db.processo.criado_em.readable = False\n    db.processo.user.writable = False\n    db.processo.user.readable = False\n    form = SQLFORM(db.processo)\n    ##pre-populating the form with the info obtained through get_page()\n    form.vars.classe = session.classe.encode("utf8")\n    form.vars.reu = session.reu.encode("utf8")\n    form.vars.numero = session.numero\n    form.vars.competencia = session.competencia.encode("utf8")\n    form.vars.crime = session.crime.encode("utf8")\n\n    if form.process().accepted:\n       session.flash = \'form accepted\'\n       redirect(URL(\'index\'))\n\n    return dict(form=form)\n\ndef pesquisa():\n    form = SQLFORM.factory(Field(\'reu\'),\n    Field(\'numero\'),\n    Field(\'competencia\'),\n    Field(\'Data_inicial\', \'date\'),\n    Field(\'Data_final\', \'date\', default = request.now))\n\n    if form.process().accepted:\n\n        if form.vars.numero!="":\n            numero = db.processo.numero.contains(form.vars.numero)\n            query = db(numero)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n        elif form.vars.reu != "":\n            reu = db.processo.reu.contains(form.vars.reu)\n            query = db(reu)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n\n        elif form.vars.competencia != "":\n            competencia = (db.processo.competencia == form.vars.competencia)\n            query = db(competencia)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n\n        elif (form.vars.Data_inicial!="") or (form.vars.Data_final!=request.now):\n            import datetime\n            from datetime import date\n            delta = datetime.timedelta(days=1)\n            session.inicial = form.vars.Data_inicial or (request.now-(60*delta))\n            session.final = form.vars.Data_final or request.now\n            data = (db.processo.criado_em >= session.inicial-delta) & (db.processo.criado_em <= session.final+delta)\n            query = db(data)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n    return dict(form=form)\n\ndef result():\n    return dict(rows=session.rows)\n\ndef escolhe_processo():\n    form1 = SQLFORM.factory(Field(\'classe\', default = session.classe_one.encode("utf8"), writable=False,))\n\n\n    form2 = SQLFORM.factory(Field(\'classe\', default = session.classe_two.encode("utf8"), writable=False ))\n\n\n    if form1.process(formname=\'form_one\').accepted:\n        #response.flash = session.processo_one.encode("utf8")\n        soup_cadastrar(session.processo_one)\n    if form2.process(formname=\'form_two\').accepted:\n        #response.flash = session.processo_two.encode("utf8")\n        soup_cadastrar(session.processo_two)\n\n    return dict(form1=form1, form2=form2)\n    \n    \ndef estatistica():\n    \n    ## Establishing todays month \n    month_today= str(request.now)[5:7]\n    \n    ## Establishing todays year \n    today_year= str(request.now)[0:4]\n    ano = (db.processo.criado_em.year() == today_year)\n    \n    for each in range (4, -1, -1):\n        mes_pesquisa = (db.processo.criado_em.month() == (month_today-each))\n        relatora = ((db.processo.competencia == "Relatora") & mes_pesquisa & ano)\n        session.frelatora_each=db(relatora).count()\n        revisora = ((db.processo.competencia == "Revisora") & mes_pesquisa & ano)\n        session.frevisora_each=db(revisora).count()\n        session.ftotal_each = session.frelatora+session.frevisora\n    \n\n\n    return dict()\n\nresponse._vars=response._caller(cadastro)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joao/Documents/developer/web2py/web2py-1/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/Joao/Documents/developer/web2py/web2py-1/applications/processos/controllers/default.py", line 170, in <module>\n  File "/Users/Joao/Documents/developer/web2py/web2py-1/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joao/Documents/developer/web2py/web2py-1/applications/processos/controllers/default.py", line 38, in cadastro\n    soup_cadastrar(form.vars.processo)\n  File "/Users/Joao/Documents/developer/web2py/web2py-1/applications/processos/controllers/default.py", line 44, in soup_cadastrar\n    processo = tj.get_page(num)\n  File "applications/processos/modules/tj.py", line 42, in get_page\n    soup = BeautifulSoup(page, "xml")\n  File "/Library/Python/2.7/site-packages/bs4/__init__.py", line 152, in __init__\n    % ",".join(features))\nFeatureNotFound: Couldn\'t find a tree builder with the features you requested: xml. Do you need to install a parser library?\n'
p11
s.